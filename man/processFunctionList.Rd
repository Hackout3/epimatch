% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/process_matching.R
\name{processFunctionList}
\alias{processFunctionList}
\title{Process the functions used for matching data}
\usage{
processFunctionList(dat1, dat2 = NULL, funlist = list())
}
\arguments{
\item{dat1}{An input linelist}

\item{dat2}{An optional extra linelist}

\item{funlist}{A list containing lists containing:
\itemize{
 \item d1vars - variable names for dataset 1
 \item d2vars - variable names for dataset 2
 \item fun - function name to process on these variables
 \item extraparams - extra parameters that need to be applied with the function.
 \item weights - a weight vector to scale each matrix (not used in processFunctionList).
}}
}
\value{
a list of distance matrices scaled by weight
}
\description{
Input one or two data sets, process them with a list of containing functions,
column names, and function parameters, and return a list of matrices by
function.
}
\examples{
library('epimatch')
## Loading Data
indata <- system.file("files", package = "epimatch")
indata <- dir(indata, full.names = TRUE)
x <- lapply(indata, read.csv, stringsAsFactors = FALSE)
names(x) <- basename(indata)

# We will use one data set from the case information and lab results
case <- x[["CaseInformationForm.csv"]]
lab <- x[["LaboratoryResultsForm7.csv"]]

# This will get all of the indices that match the ID and Names with a
# threshold of 0.25
res <- processFunctionList(dat1 = case,
                           dat2 = lab,
                           funlist = list(
                           list(d1vars = "ID",
                                d2vars = "ID",
                                fun = "nameDists",
                                extraparams = NULL,
                                weight = 1),
                           list(d1vars = c("Surname", "OtherNames"),
                                d2vars = c("SurnameLab", "OtherNameLab"),
                                fun = "nameDists",
                                extraparams = NULL,
                                weight = 0.5)
                           ))
res # distance matrices
}

